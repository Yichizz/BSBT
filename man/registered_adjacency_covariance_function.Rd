% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/registered.covariance.function.R
\name{registered_adjacency_covariance_function}
\alias{registered_adjacency_covariance_function}
\title{Construct a registered covariance matrix from the adjaency matrix}
\usage{
registered_adjacency_covariance_function(
  adj.matrix,
  type,
  hyperparameters,
  linear.combination,
  linear.constraint = 0,
  tol = 1e-05
)
}
\arguments{
\item{adj.matrix}{The graph adjacency matrix}

\item{type}{The type of covariance function used. One of "sqexp", "ratquad" or "matern". Note: only matern with nu = 5/2 is supported.}

\item{hyperparameters}{A vector containing the covariance function hyperparameters. For the squared exponential and matern, the vector should contain the variance and length scale, for the rational quadratic, the vector should contain the variance, lenght scale and scaling parameters}

\item{linear.combination}{A matrix which defines the linear combination of (lambda_1, ..., lambda_N)^T.}

\item{linear.constraint}{The value the linear constraint takes. Defaults to 0.}

\item{tol}{The tolerance for the Cholesky decomposition}
}
\value{
The mean vector and covariance matrix
}
\description{
This function constructs a covariance function from the graph's adjacency matrix. The covairance function may be suqred exponential, rational quadratic or Matern
}
\examples{
#Construct covariance matrix of Dar es Salaam, Tanzania, using network metric
data(dar.shapefiles, package = "BTUN") #load data
adj.matrix <- surveillance::poly2adjmat(dar.shapefiles$geometry) #create adjacency matrix
#Covariance registetred by sum of subwards is 0 using squared exponential function
k <- registered_adjacency_covariance_function(adj.matrix, type = "sqexp",
       hyperparameters = c(1, 0.5), rep(1, dim(adj.matrix)[1]), 0)
       #Covariance registetred by sum of subwards is 0 using rational quadratic function
k <- registered_adjacency_covariance_function(adj.matrix, type = "ratquad",
       hyperparameters = c(1, 0.5, 2), rep(1, dim(adj.matrix)[1]), 0)
}
